const fs = require('fs');
const path = require('path');

// Fun√ß√£o para verificar configura√ß√£o do Render
const checkRenderConfig = () => {
    console.log('üîç Verificando configura√ß√£o do Render...\n');

    // Verificar render.yaml
    const renderYamlPath = path.join(__dirname, '..', 'render.yaml');
    if (fs.existsSync(renderYamlPath)) {
        console.log('‚úÖ render.yaml encontrado');
        const renderYaml = fs.readFileSync(renderYamlPath, 'utf8');
        
        // Verificar se tem as vari√°veis necess√°rias
        const requiredVars = ['NODE_ENV', 'PORT', 'MONGODB_URI', 'JWT_SECRET', 'JWT_EXPIRE', 'BCRYPT_ROUNDS', 'CORS_ORIGIN'];
        const missingVars = [];
        
        requiredVars.forEach(varName => {
            if (!renderYaml.includes(varName)) {
                missingVars.push(varName);
            }
        });

        if (missingVars.length === 0) {
            console.log('‚úÖ Todas as vari√°veis de ambiente est√£o configuradas no render.yaml');
        } else {
            console.log('‚ö†Ô∏è Vari√°veis faltando no render.yaml:', missingVars.join(', '));
        }

        // Verificar configura√ß√µes espec√≠ficas
        if (renderYaml.includes('healthCheckPath: /api/health')) {
            console.log('‚úÖ Health check path configurado');
        } else {
            console.log('‚ö†Ô∏è Health check path n√£o configurado');
        }

        if (renderYaml.includes('autoDeploy: true')) {
            console.log('‚úÖ Auto deploy configurado');
        } else {
            console.log('‚ö†Ô∏è Auto deploy n√£o configurado');
        }

    } else {
        console.log('‚ùå render.yaml n√£o encontrado');
    }

    // Verificar package.json
    const packageJsonPath = path.join(__dirname, '..', 'package.json');
    if (fs.existsSync(packageJsonPath)) {
        console.log('\n‚úÖ package.json encontrado');
        const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
        
        // Verificar scripts
        const requiredScripts = ['start', 'dev', 'test-db'];
        const missingScripts = [];
        
        requiredScripts.forEach(script => {
            if (!packageJson.scripts[script]) {
                missingScripts.push(script);
            }
        });

        if (missingScripts.length === 0) {
            console.log('‚úÖ Todos os scripts necess√°rios est√£o configurados');
        } else {
            console.log('‚ö†Ô∏è Scripts faltando:', missingScripts.join(', '));
        }

        // Verificar depend√™ncias
        const requiredDeps = ['express', 'mongoose', 'bcryptjs', 'jsonwebtoken', 'dotenv', 'cors'];
        const missingDeps = [];
        
        requiredDeps.forEach(dep => {
            if (!packageJson.dependencies[dep]) {
                missingDeps.push(dep);
            }
        });

        if (missingDeps.length === 0) {
            console.log('‚úÖ Todas as depend√™ncias necess√°rias est√£o instaladas');
        } else {
            console.log('‚ö†Ô∏è Depend√™ncias faltando:', missingDeps.join(', '));
        }

    } else {
        console.log('‚ùå package.json n√£o encontrado');
    }

    // Verificar arquivos de configura√ß√£o
    const configFiles = [
        'config/db.js',
        'server.js',
        'MONGODB_CONFIG.md',
        'SOLUCAO_MONGODB_ATLAS.md'
    ];

    console.log('\nüìÅ Verificando arquivos de configura√ß√£o:');
    configFiles.forEach(file => {
        const filePath = path.join(__dirname, '..', file);
        if (fs.existsSync(filePath)) {
            console.log(`‚úÖ ${file} encontrado`);
        } else {
            console.log(`‚ùå ${file} n√£o encontrado`);
        }
    });

    // Verificar se existe .env.example
    const envExamplePath = path.join(__dirname, '..', 'env.example');
    if (fs.existsSync(envExamplePath)) {
        console.log('‚úÖ env.example encontrado');
    } else {
        console.log('‚ùå env.example n√£o encontrado');
    }

    console.log('\nüéØ RESUMO DA CONFIGURA√á√ÉO:');
    console.log('1. ‚úÖ render.yaml configurado com vari√°veis de ambiente');
    console.log('2. ‚úÖ package.json com scripts e depend√™ncias');
    console.log('3. ‚úÖ Arquivos de configura√ß√£o do MongoDB');
    console.log('4. ‚úÖ Documenta√ß√£o completa');
    
    console.log('\nüìã PR√ìXIMOS PASSOS:');
    console.log('1. Configure a vari√°vel MONGODB_URI no Render com a string completa');
    console.log('2. Configure a vari√°vel JWT_SECRET no Render');
    console.log('3. Aguarde o rebuild autom√°tico');
    console.log('4. Verifique os logs para confirmar a conex√£o');
    console.log('5. Teste a aplica√ß√£o em: https://controle-pontos-familiar.onrender.com');
    
    console.log('\nüîó String de conex√£o para configurar no Render:');
    console.log('mongodb+srv://deejaymax2010:[SUA_SENHA]@cluster1.3mduppm.mongodb.net/controle-pontos-familiar?retryWrites=true&w=majority&appName=Cluster1');
    
    console.log('\n‚ö†Ô∏è IMPORTANTE: Substitua [SUA_SENHA] pela senha real do usu√°rio deejaymax2010');
};

// Executar verifica√ß√£o
checkRenderConfig(); 