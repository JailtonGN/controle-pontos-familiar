const mongoose = require('mongoose');
require('dotenv').config();

async function testConnection() {
    console.log('üîç Testando conex√£o com MongoDB Atlas...');
    console.log('==========================================');
    
    try {
        // Verificar se as vari√°veis est√£o configuradas
        console.log('\nüìã Verificando configura√ß√µes:');
        console.log('- MONGODB_URI configurada:', !!process.env.MONGODB_URI);
        console.log('- JWT_SECRET configurada:', !!process.env.JWT_SECRET);
        console.log('- PORT configurada:', process.env.PORT || '3000');
        console.log('- NODE_ENV:', process.env.NODE_ENV || 'development');
        
        if (!process.env.MONGODB_URI) {
            console.error('‚ùå MONGODB_URI n√£o encontrada no arquivo .env');
            process.exit(1);
        }
        
        // Mascarar a senha na URL para exibi√ß√£o
        const maskedURI = process.env.MONGODB_URI.replace(/:([^@]+)@/, ':***@');
        console.log('- URI (mascarada):', maskedURI);
        
        console.log('\nüîå Tentando conectar...');
        
        const conn = await mongoose.connect(process.env.MONGODB_URI, {
            useNewUrlParser: true,
            useUnifiedTopology: true,
            serverSelectionTimeoutMS: 10000,
            socketTimeoutMS: 45000,
        });
        
        console.log('‚úÖ Conex√£o estabelecida com sucesso!');
        console.log('üìä Detalhes da conex√£o:');
        console.log('- Host:', conn.connection.host);
        console.log('- Database:', conn.connection.name);
        console.log('- ReadyState:', conn.connection.readyState === 1 ? 'Conectado' : 'Desconectado');
        console.log('- Collections dispon√≠veis:', Object.keys(conn.connection.collections).length);
        
        // Testar uma opera√ß√£o simples
        console.log('\nüß™ Testando opera√ß√£o no banco...');
        const collections = await conn.connection.db.listCollections().toArray();
        console.log('‚úÖ Collections encontradas:', collections.length);
        collections.forEach(col => {
            console.log(`  - ${col.name}`);
        });
        
        // Testar cria√ß√£o de √≠ndices
        console.log('\nüîß Testando cria√ß√£o de √≠ndices...');
        try {
            await conn.connection.db.collection('test').createIndex({ testField: 1 });
            console.log('‚úÖ √çndice de teste criado com sucesso');
            await conn.connection.db.collection('test').drop();
            console.log('‚úÖ Collection de teste removida');
        } catch (indexError) {
            console.log('‚ö†Ô∏è Aviso ao testar √≠ndices:', indexError.message);
        }
        
        await mongoose.disconnect();
        console.log('\n‚úÖ Teste conclu√≠do com sucesso!');
        console.log('üéâ MongoDB Atlas est√° funcionando corretamente!');
        
    } catch (error) {
        console.error('\n‚ùå Erro na conex√£o:', error.message);
        console.error('\nüîß Poss√≠veis solu√ß√µes:');
        console.error('  1. Verifique se a senha est√° correta na MONGODB_URI');
        console.error('  2. Verifique se o IP est√° liberado no MongoDB Atlas');
        console.error('  3. Verifique se o cluster est√° ativo');
        console.error('  4. Verifique a conectividade com a internet');
        
        if (error.name === 'MongoServerSelectionError') {
            console.error('\nüåê Erro de sele√ß√£o do servidor - poss√≠veis causas:');
            console.error('  - Cluster inativo ou pausado');
            console.error('  - IP n√£o autorizado no Network Access');
            console.error('  - Problemas de conectividade');
        }
        
        if (error.name === 'MongoParseError') {
            console.error('\nüîó Erro na string de conex√£o - verifique:');
            console.error('  - Formato da URI');
            console.error('  - Caracteres especiais na senha');
            console.error('  - Nome do cluster');
        }
        
        process.exit(1);
    }
}

// Executar o teste
testConnection();