const mongoose = require('mongoose');
require('dotenv').config();

async function applyUniqueNameIndex() {
    try {
        // Conectar ao MongoDB
        await mongoose.connect(process.env.MONGODB_URI);
        console.log('‚úÖ Conectado ao MongoDB');

        // Importar o modelo Kid
        const Kid = require('../models/Kid');
        
        console.log('\nüîß Aplicando √≠ndice √∫nico global no nome das crian√ßas...');
        
        // 1. Remover √≠ndice composto anterior (se existir)
        try {
            await Kid.collection.dropIndex('name_familyId_unique');
            console.log('üóëÔ∏è √çndice composto anterior removido');
        } catch (e) {
            console.log('‚ÑπÔ∏è √çndice composto n√£o existia');
        }
        
        // 2. Criar √≠ndice √∫nico global no nome
        console.log('üìä Criando √≠ndice √∫nico global em "name"...');
        await Kid.collection.createIndex(
            { name: 1 }, 
            { 
                unique: true,
                name: 'name_unique'
            }
        );
        console.log('‚úÖ √çndice √∫nico global criado com sucesso!');
        
        // 3. Verificar se h√° conflitos existentes
        console.log('\nüîç Verificando conflitos existentes...');
        
        // Buscar todas as crian√ßas
        const allKids = await Kid.find({ isActive: true });
        
        // Agrupar por nome para encontrar duplicatas
        const nameGroups = {};
        allKids.forEach(kid => {
            if (!nameGroups[kid.name]) {
                nameGroups[kid.name] = [];
            }
            nameGroups[kid.name].push(kid);
        });
        
        // Verificar duplicatas
        const duplicates = Object.entries(nameGroups).filter(([name, kids]) => kids.length > 1);
        
        if (duplicates.length > 0) {
            console.log('‚ö†Ô∏è DUPLICATAS ENCONTRADAS:');
            duplicates.forEach(([name, kids]) => {
                console.log(`   Nome: "${name}" - ${kids.length} crian√ßas:`);
                kids.forEach((kid, index) => {
                    console.log(`     ${index + 1}. ID: ${kid._id}, Fam√≠lia: ${kid.familyId}, Parent: ${kid.parentId}`);
                });
                console.log('');
            });
            
            console.log('üí° SOLU√á√ïES:');
            console.log('1. Renomear uma das crian√ßas para evitar conflito');
            console.log('2. Ou desativar uma das crian√ßas');
            console.log('3. Ou mover uma das crian√ßas para outra fam√≠lia e renomear');
            
            console.log('\n‚ùå N√ÉO √© poss√≠vel aplicar o √≠ndice √∫nico com duplicatas existentes');
            console.log('Resolva os conflitos primeiro e execute o script novamente');
            
        } else {
            console.log('‚úÖ Nenhuma duplicata encontrada!');
            
            // 4. Testar a nova valida√ß√£o
            console.log('\nüß™ Testando nova valida√ß√£o...');
            
            const testName = 'Teste √önico';
            
            try {
                // Tentar criar crian√ßa com nome de teste
                const testKid = new Kid({
                    name: testName,
                    age: 10,
                    pin: '1234',
                    parentId: new mongoose.Types.ObjectId(), // ID fict√≠cio
                    familyId: new mongoose.Types.ObjectId() // ID fict√≠cio
                });
                await testKid.save();
                console.log('‚úÖ Primeira crian√ßa criada com sucesso');
                
                // Tentar criar segunda crian√ßa com mesmo nome
                const testKid2 = new Kid({
                    name: testName,
                    age: 10,
                    pin: '5678',
                    parentId: new mongoose.Types.ObjectId(), // ID fict√≠cio
                    familyId: new mongoose.Types.ObjectId() // ID fict√≠cio
                });
                await testKid2.save();
                console.log('‚ùå ERRO: Deveria ter falhado (nome duplicado)');
                
            } catch (error) {
                if (error.code === 11000) {
                    console.log('‚úÖ Valida√ß√£o funcionando: Erro ao tentar criar nome duplicado');
                } else {
                    console.log('‚ùå Erro inesperado:', error.message);
                }
            }
            
            // Limpar dados de teste
            await Kid.deleteMany({ name: testName });
            console.log('üßπ Dados de teste removidos');
        }
        
        console.log('\nüéØ RESUMO:');
        console.log('‚úÖ √çndice √∫nico global criado em "name"');
        console.log('‚ùå Nomes duplicados s√£o BLOQUEADOS globalmente');
        console.log('üí° Cada crian√ßa deve ter um nome √∫nico no sistema');
        
    } catch (error) {
        console.error('‚ùå Erro:', error);
    } finally {
        await mongoose.disconnect();
        console.log('\nüîå Desconectado do MongoDB');
    }
}

applyUniqueNameIndex(); 