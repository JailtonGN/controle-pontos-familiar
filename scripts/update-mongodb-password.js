const mongoose = require('mongoose');
require('dotenv').config();

// Fun√ß√£o para testar a nova senha do MongoDB
const testNewPassword = async () => {
    try {
        console.log('üîç Testando nova senha do MongoDB...');
        console.log('üìä Nova senha: TyCsPlZNsDWOM46N');
        
        if (!process.env.MONGODB_URI) {
            console.error('‚ùå MONGODB_URI n√£o configurada!');
            console.error('Configure a vari√°vel de ambiente MONGODB_URI');
            console.error('Exemplo: mongodb+srv://seu_usuario:TyCsPlZNsDWOM46N@seu_cluster.mongodb.net/controle-pontos-familiar');
            process.exit(1);
        }

        console.log('- URI (mascarada):', process.env.MONGODB_URI.replace(/\/\/[^:]+:[^@]+@/, '//***:***@'));

        const conn = await mongoose.connect(process.env.MONGODB_URI, {
            useNewUrlParser: true,
            useUnifiedTopology: true,
            serverSelectionTimeoutMS: 10000,
            socketTimeoutMS: 45000,
        });

        console.log('‚úÖ Conex√£o bem-sucedida com a nova senha!');
        console.log(`üìä Host: ${conn.connection.host}`);
        console.log(`üìä Database: ${conn.connection.name}`);
        console.log(`üìä Ready State: ${conn.connection.readyState}`);

        // Testar opera√ß√£o b√°sica
        const collections = await conn.connection.db.listCollections().toArray();
        console.log(`üìä Collections encontradas: ${collections.length}`);
        
        if (collections.length > 0) {
            console.log('üìã Collections:');
            collections.forEach(collection => {
                console.log(`  - ${collection.name}`);
            });
        }

        await mongoose.disconnect();
        console.log('‚úÖ Teste da nova senha conclu√≠do com sucesso!');
        console.log('üöÄ Agora voc√™ pode atualizar a senha no Render!');
        process.exit(0);

    } catch (error) {
        console.error('‚ùå Erro ao conectar com a nova senha:', error.message);
        console.error('üîß Verifique:');
        console.error('  1. Se a string de conex√£o est√° correta');
        console.error('  2. Se o usu√°rio e nova senha est√£o corretos');
        console.error('  3. Se o IP whitelist est√° configurado no MongoDB Atlas');
        console.error('  4. Se o cluster est√° ativo');
        process.exit(1);
    }
};

// Fun√ß√£o para gerar string de conex√£o com nova senha
const generateConnectionString = () => {
    console.log('üîß Gerando string de conex√£o com nova senha...');
    console.log('');
    console.log('üìã Substitua os valores abaixo:');
    console.log('');
    console.log('mongodb+srv://SEU_USUARIO:TyCsPlZNsDWOM46N@SEU_CLUSTER.mongodb.net/controle-pontos-familiar?retryWrites=true&w=majority');
    console.log('');
    console.log('‚ö†Ô∏è  IMPORTANTE:');
    console.log('   - Substitua SEU_USUARIO pelo seu nome de usu√°rio do MongoDB Atlas');
    console.log('   - Substitua SEU_CLUSTER pelo nome do seu cluster');
    console.log('   - Mantenha TyCsPlZNsDWOM46N como a nova senha');
    console.log('');
    console.log('üöÄ Use esta string no Render:');
    console.log('   1. V√° para o dashboard do Render');
    console.log('   2. Encontre seu servi√ßo controle-pontos-familiar');
    console.log('   3. V√° em Environment ‚Üí MONGODB_URI');
    console.log('   4. Substitua pela nova string');
    console.log('   5. Salve e aguarde o deploy');
};

// Verificar argumentos
const args = process.argv.slice(2);

if (args.includes('--generate')) {
    generateConnectionString();
} else {
    testNewPassword();
} 